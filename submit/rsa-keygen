#!/usr/bin/env python3
import sys, argparse, random
from fractions import gcd


#Parses Arguments
def check_arg(args=None):
    parser = argparse.ArgumentParser(description='Process flags for the program.')
    parser.add_argument('-p','--public', required= 'True', help='public key file')
    parser.add_argument('-s','--secret', required= 'True', help='secret key file')
    parser.add_argument('-n','--number', required= 'True', help='number of bits')
    results = parser.parse_args(args)
    return (results.public, results.secret, results.number)

def ProbPrimeRabinMiller(n):
  """Return True if n passes k rounds of the Miller-Rabin primality
    test (and is probably prime). Return False if n is proved to be
    composite.
    """
  small_primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]
  k = 100
  if n < 2: return False
  for p in small_primes:
    if n < p * p: return True
    if n % p == 0: return False
  r, s = 0, n - 1
  while s % 2 == 0:
    r += 1
    s //= 2
  for _ in range(k):
    a = random.randrange(2, n - 1)
    x = pow(a, s, n)
    if x == 1 or x == n - 1:
      continue
    for _ in range(r - 1):
      x = pow(x, 2, n)
      if x == n - 1:
        break
    else:
      return False
  return True

def randprime(bit_len):
  while True:
    prime = random.getrandbits(bit_len)
    prime = prime | (1 << bit_len)

    if ProbPrimeRabinMiller(prime): break

  return prime

def multinv(order, value):
    x, y = 0, 1
    a, b = order, value

    while b != 0:
        a, b, c = b, a % b, a // b
        x, y = y - c * x, x
        rv = (1 - y * order) // value
    if rv < 0:
        rv += order
    if not (0 <= rv < order and (value * rv) % order == 1):
        return None
    return rv

def rsa_keygen(num_bits):
    d = None
    while(d == None):
        prime1 = randprime(num_bits)
        prime2 = randprime(num_bits)
        N = prime1 * prime2
        order = (prime1 - 1) * (prime2 - 1)
        e = order
        while gcd(e, order) != 1:
            e = random.choice(range(3,100))
        d = multinv(order, e)


    return N, e, d


p, s, n = check_arg(sys.argv[1:])

public_key = open(p, 'w')

private_key = open(s, 'w')

N, e, d = rsa_keygen(int(n))

print("e = " + str(e))
print("d = " + str(d))

public_key.write(str(n) + "\n")
public_key.write(str(N) + "\n")
public_key.write(str(e))

private_key.write(str(n) + "\n")
private_key.write(str(N) + "\n")
private_key.write(str(d))
